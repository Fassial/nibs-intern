knitr::opts_chunk$set(echo = TRUE)
# work_space = "luolab"
# work_space = "rayhome"
work_space = "mac"
if ( work_space == "luolab" ){
wd = '/media/luolab/ZA1BT1ER/scRNAseq/GSE112436_Duan_PDGFRb'
} else if (work_space == "rayhome" ){
wd = 'D:/scRNAseq/GSE112436_Duan_PDGFRb'
} else if (work_space == "mac"){
wd = '/Users/Ray/Documents/Work/scRNAseq/GSE112436_Duan_PDGFRb'
}
knitr::opts_knit$set(root.dir = wd)
library(Seurat)
gencode.vM21.genename <- read.table("gencode.vM21.annotation.tab", sep = "\t", col.names = c('stable_id','gene_short_name')); gencode.vM21.genename$stable_id <- sub(pattern = "\\.\\d+", "",x = gencode.vM21.genename$stable_id)
# Generic Function: Read expression matrices
readexpmat <- function(path_to_exp_mat, anno = gencode.vM21.genename){
expmat <- read.csv(path_to_exp_mat, header = TRUE, as.is = TRUE, check.names = FALSE)
count_mat <- as.matrix(expmat[,2:ncol(expmat)])
rnames <- as.data.frame(expmat[,1]); colnames(rnames) <- "gene_id"
rnames$gene_name <- gencode.vM21.genename[match(rnames$gene_id, gencode.vM21.genename$stable_id),"gene_short_name"]
rownames(count_mat) <- rnames$gene_name
colnames(count_mat) <-colnames(expmat)[2:ncol(expmat)]
count_mat <- count_mat[-which(is.na(rownames(count_mat))),]
return(count_mat)
}
SSW <- function(object, assay, npcs=40, dims=1:30, k.param=20, algorithm=1, resolution=0.3) {
if(assay=='integrated'){
DefaultAssay(object) <- 'integrated'
}else if(assay=='RNA'){
DefaultAssay(object) <- 'RNA'
object <- NormalizeData(object, normalization.method = "LogNormalize", scale.factor = 10000)
object <- FindVariableFeatures(object, selection.method = "vst", nfeatures = 2000)
}
# Seurat Standard workflow
object <- ScaleData(object)
object <- RunPCA(object, npcs = npcs)
if(assay=='integrated'){
object <- RunUMAP(object, reduction = "pca", dims = dims, umap.method = 'umap-learn', metric = 'correlation', reduction.key = "UMAPint_", reduction.name = "umap.int")
object <- RunTSNE(object, reduction = "pca", dims = dims, reduction.key = 'TSNEint_', reduction.name = 'tsne.int')
object <- FindNeighbors(object, reduction = 'pca', k.param = k.param, dims = dims)
object <- FindClusters(object, algorithm = algorithm, resolution = resolution)
}else if(assay=='RNA'){
object <- FindNeighbors(object, reduction = 'pca', k.param = k.param, dims = dims)
object <- FindClusters(object, algorithm = algorithm, resolution = resolution)
object <- RunUMAP(object, reduction = "pca", dims = dims, umap.method = 'umap-learn', metric = 'correlation', reduction.key = "UMAP_", reduction.name = "umap")
object <- RunTSNE(object, reduction = "pca", dims = dims, reduction.key = 'TSNE_', reduction.name = 'tsne')
}
return(object)
}
if (file.exists(file.path(wd, 'Duan_GSE112436_int.rds'))){
new_analysis = FALSE
writeLines(c("There is an existing file in the location:",file.path(wd, 'Duan_GSE112436_int.rds'),'You probably want to load that file instead of loading and processing raw data all over again.'))
} else {
new_analysis = TRUE
}
if (new_analysis){
SA01 <- readexpmat("GSM3070094_SA01.csv.gz")
SA02 <- readexpmat("GSM3070095_SA02.csv.gz")
SA03 <- readexpmat("GSM3070096_SA03.csv.gz")
LPS01 <- readexpmat("GSM3070097_LPS01.csv.gz")
LPS02 <- readexpmat("GSM3070098_LPS02.csv.gz")
LPS03 <- readexpmat("GSM3070099_LPS03.csv.gz")
# Create Seurat object from individual data and merge. Assign metadata for treatment into.
cells <- CreateSeuratObject(SA01, min.features = 600, project = "PDGFRb"); cells$treat = 'Saline'
SA02_tmp <- CreateSeuratObject(SA02, min.features = 600, project = "PDGFRb"); SA02_tmp$treat = 'Saline'
cells <- merge(cells,SA02_tmp)
SA03_tmp <- CreateSeuratObject(SA03, min.features = 600, project = "PDGFRb"); SA03_tmp$treat = 'Saline'
cells <- merge(cells,SA03_tmp)
LPS01_tmp <- CreateSeuratObject(LPS01, min.features = 600, project = "PDGFRb"); LPS01_tmp$treat = 'LPS'
cells <- merge(cells,LPS01_tmp)
LPS02_tmp <- CreateSeuratObject(LPS02, min.features = 600, project = "PDGFRb"); LPS02_tmp$treat = 'LPS'
cells <- merge(cells,LPS02_tmp)
LPS03_tmp <- CreateSeuratObject(LPS03, min.features = 600, project = "PDGFRb"); LPS03_tmp$treat = 'LPS'
cells <- merge(cells,LPS03_tmp)
# Clear workspace
rm(SA01, SA02_tmp, SA02, SA03_tmp, SA03, LPS01_tmp, LPS01, LPS02_tmp, LPS02, LPS03_tmp, LPS03)
}
cells.filtered <- subset(cells, subset = nFeature_RNA < 7500 & nFeature_RNA > 600)
genes_to_keep <- rownames(cells.filtered)[which(rowSums(as.matrix(GetAssayData(cells.filtered, slot = 'counts') > 0)) >= 3)]
cells.filtered <- subset(cells.filtered, features = genes_to_keep)
cells.list <- SplitObject(cells.filtered, split.by = 'treat')  # Split by treat
# Normalize, feature selection by each treat
for (i in 1:length(cells.list)){
cells.list[[i]] <- NormalizeData(cells.list[[i]], verbose = TRUE)
cells.list[[i]] <- FindVariableFeatures(cells.list[[i]], selection.method = "vst", nfeatures = 2000, verbose = TRUE)
}
cells.anchors.dim30 <- FindIntegrationAnchors(object.list = cells.list, dims = 1:30, k.filter = 200) # dims and k.filter are tunable parameters
cells.integrated.dim30 <- IntegrateData(anchorset = cells.anchors.dim30, dims = 1:30)
cells.integrated.dim30 <- SSW(cells.integrated.dim30, assay = 'integrated')
